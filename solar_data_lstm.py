# -*- coding: utf-8 -*-
"""Solar_Data_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1moZmB8JwOCiQtxyQdUJfRLkKmypQIKOY
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# lets read the dataset
data = pd.read_csv("/content/solar_data_copy_10_.csv")

data.head()

data.shape

data.info()

sns.jointplot(x='Solar_Radiation',y='Relative_Humidity',data = data, kind = 'kde' ,color = 'brown')

sns.jointplot(x='Solar_Radiation',y='Air_Temp',data = data)

sns.jointplot(x='Solar_Radiation',y='Power_Generated',data = data)

sns.pairplot(data, hue= 'Power_Generated')

# Removing the two columns which is not in need
waste1 = data.pop("Timestamp")

data.info()

"""#
Standardizing the data

"""

from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()

numericals = ['Air_Temp','Relative_Humidity','Wind_Speed','Solar_Radiation','RTD_1','RTD_2','RTD_3','RTD_4','RTD_5','Array_Voltage','Array_Current','Power_Generated']

data[numericals] = scaler.fit_transform(data[numericals])

data.head(5)

waste2 = data.pop("Wind_Direction")

Y = data.pop('Power_Generated')

X = data

# spliting the data into train and test
from sklearn.model_selection import train_test_split,cross_val_score
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2)

#  LSTM Model
import tensorflow as tf

tf.random.set_seed(42)

model_1 = tf.keras.Sequential([tf.keras.layers.LSTM(300,activation='relu',return_sequences=True,input_shape=(11,1)),
                               tf.keras.layers.LSTM(200,activation='relu'),
                               tf.keras.layers.Dense(1)])

model_1.compile(loss = "mae",
                optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
                metrics = ["mae"])

history_1 = model_1.fit(tf.expand_dims(X_train,axis=-1),Y_train, epochs=9)

pd.DataFrame(history_1.history).plot()
plt.title("Model 1 LSTM")
plt.ylabel("Mean abosulte error")
plt.xlabel("Epochs")

model_1.evaluate(X_test,Y_test)

